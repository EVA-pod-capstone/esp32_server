<html><head><meta name="viewport" content="width=device-width, initial-scale=1"></head> 
<style>
  .button{
    font-family:'Times New Roman', Times, serif;
    font-size: 20px;
    margin-left: 20px;
  }
  #download-button {
      background-color: aquamarine;
      border: 1px solid black;
  }
  #download-button:hover {
      background-color: rgb(106, 233, 224);
  }
  #download-button:active {
      background-color: rgb(40, 115, 189);
  }
  #delete-button {
      background-color: rgb(255, 61, 61);
      border: 1px solid black;
      color: white;
  }
  #delete-button:hover {
      background-color: rgb(213, 40, 40);
  }
  #delete-button:active {
      background-color: rgb(233, 111, 24);
  }
  #sendLocation, #sendTime{
      background-color: rgb(255, 251, 195);
      border: 1px solid black;
      color: rgb(0, 0, 0);
  }
  #sendLocation:hover, #sendTime:hover{
      background-color: rgb(250, 235, 134);
  }
  #sendLocation:active, #sendTime:active{
      background-color: rgb(195, 233, 24);
  }
  .status-message{
    font-family:'Times New Roman', Times, serif;
    font-size: 18px;
    margin-left: 20px;
  }
  h1{
    background-color: rgb(164, 255, 154);
    margin: -8px;
  }
</style>
<body> 
<h1>EVA Pod Control</h1>
<p> <button id="sendTime" onclick="sendTime()" class="button">Send Time</button> 
  <button id="sendLocation" onclick="sendLocation()" class="button">Send Location</button>
  <!-- <button id="checkData" onclick="checkData()" class="button">Check EVA Pod Time and Location</button> </p> -->
<p><a href="/download"><button id="download-button" class="button">Download Data</button></a> 
    <a href="/delete"><button id="delete-button" class="button">Delete Data</button></a> </p>
    <p class="status-message" id="status-message">Status Message:</p>
        <!-- Delete confirmation, repeat timestamp to user, repeat location to user,
     allow user to see geolocation API status, allow user to check location/time without sending anew -->
  <hr>
  <h4>Help</h4>
  <p>Send Time: When setting up the EVA Pod, be sure to connect an external device and hit the 'Send Time' button.
     When powered and running, the EVA Pod can keep time, but it needs to be provided a starting point.
     When you hit this button, the EVA Pod will grab your device's current time and count from there to assign date and time
     to all future measurements. Note that if it loses power or resets, it will lose time, so this step should be done again 
     after changing the battery.
  </p>
  <p>Send Location: Optionally hit this button when setting up the EVA Pod to store latitude and longitude with the data.
    The EVA Pod has no internal GPS, but it can grab your device's GPS location if you allow it. 
    This will allow the EVA website to later grab your EVA Pod's location automatically from your data file.
    If the website cannot find location data in the file, it will ask you to enter it manually.
    (This step does not need to be done again until you decide to move your EVA Pod to a new location.)
 </p>
 <p>Download Data: Press this button to download the csv file storing the EVA Pod's data. This file can be uploaded 
  directly to the EVA website or parsed and analyzed manually.
</p>
<p>Delete Data: Press this button to clear the contents of the csv file on the EVA Pod. This action cannot be undone. This does not clear the
  stored time or location. If you wish to reset these data, press the button to update the corresponding value. 
</p>
  </body>
<script> 
        var latitude = 999; 
        var longitude = 999; 
        var err_message = "";
        window.onload = function() { 
        if (navigator.geolocation) { 
            navigator.geolocation.getCurrentPosition((position) => {  
              latitude = position.coords.latitude; 
              longitude = position.coords.longitude; 
              console.log(latitude); 
              console.log(longitude); 
              }, (error) => {console.log(error); err_message = error.message; }); 
        } else { 
            console.log("Geolocation is not supported by this browser."); 
            latitude = 999; 
            longitude = 999; 
        }};
        function sendLocation() { 
          if (err_message != ""){
          document.getElementById("status-message").innerText = "Status Message: " + err_message;
          } else {
            document.getElementById("status-message").innerText = "Status Message: Sending Location";
          }
             fetch(window.location.origin + "/send_location?latitude=" + latitude + "&longitude=" + longitude, { 
            method: "GET", 
            headers: { 
                "Accept": "application/json", 
                "Content-type": "application/json" 
            } 
}); 
        }; 
        function sendTime() { 
            var deviceClock = new Date();
            var hour = deviceClock.getUTCHours(); 
            var minute = deviceClock.getUTCMinutes(); 
            var second = deviceClock.getUTCSeconds(); 
            var day = deviceClock.getUTCDate(); 
            var month = deviceClock.getUTCMonth() + 1; 
            var year = deviceClock.getUTCFullYear(); 
            fetch(window.location.origin + "/send_time?year=" + year + "&month=" + month + "&day=" + day 
                                      + "&hour=" + hour + "&minute=" + minute +"&second=" + second, { 
            method: "GET", 
            headers: { 
                "Accept": "application/json", 
                "Content-type": "application/json" 
            } 
}); 
        }; 
    </script> 
</html>
